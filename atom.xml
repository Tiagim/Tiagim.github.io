<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tiagim.github.io</id>
    <title>重樱的长门</title>
    <subtitle></subtitle>
    <icon>https://tiagim.github.io/assets/favicon.ico</icon>
    <link href="https://tiagim.github.io" />
    <author>
      <name>Tiagim</name>
    </author>
    <updated>2023-03-26T09:35:52.000Z</updated>
    <entry>
        <id>https://tiagim.github.io/OI/slope/</id>
        <title>浅谈斜率优化</title>
        <link rel="alternate" href="https://tiagim.github.io/OI/slope/"/>
        <content type="html">&lt;p&gt;之前研究过一段时间的斜率优化，总觉的什么时候该写写。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;h1 id=&#34;普通斜优&#34;&gt;&lt;a href=&#34;#普通斜优&#34; class=&#34;headerlink&#34; title=&#34;普通斜优&#34;&gt;&lt;/a&gt;普通斜优&lt;/h1&gt;&lt;p&gt;斜率优化是一种优化DP的方法，主要应用于 $1D&amp;#x2F;1D$ 的转移中（也有反例），一般可以把复杂度优化成 $O(n)$ 或 $O(n\log n)$。斜率优化主要利用了++单调性++{.wavy}，所以在阅读下文之前，请至少熟练掌握++单调队列++{.wavy}。&lt;/p&gt;
&lt;p&gt;本文以下面这道题为例讲解斜率优化，并对涉及到的一些本题之外的问题，在后文提供练习题。&lt;/p&gt;
&lt;p&gt;+++ [HNOI2008]玩具装箱&lt;/p&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;有 $n$ 个玩具，第 $i$ 个长度为 $c_i$。将第 $i$ 到第 $j$ 个玩具装到一个箱子里会花费 $(j-i+\sum\limits_{k&amp;#x3D;i}^jc_k-L)^2$ 的代价。求总代价最小值。&lt;/p&gt;
&lt;p&gt;$1\leqslant n\leqslant 5\times 10^4$，$1\leqslant L,c_i\leqslant 10^7$&lt;/p&gt;
&lt;h2 id=&#34;输入格式&#34;&gt;&lt;a href=&#34;#输入格式&#34; class=&#34;headerlink&#34; title=&#34;输入格式&#34;&gt;&lt;/a&gt;输入格式&lt;/h2&gt;&lt;p&gt;第一行两个整数，$n$ 和 $L$。&lt;/p&gt;
&lt;p&gt;第 $2$ 到第 $(n+1)$ 行，第 $(i+1)$ 行一个整数 $c_i$。&lt;/p&gt;
&lt;h2 id=&#34;输出格式&#34;&gt;&lt;a href=&#34;#输出格式&#34; class=&#34;headerlink&#34; title=&#34;输出格式&#34;&gt;&lt;/a&gt;输出格式&lt;/h2&gt;&lt;p&gt;一行一个整数代表最小总代价。&lt;/p&gt;
&lt;h2 id=&#34;样例&#34;&gt;&lt;a href=&#34;#样例&#34; class=&#34;headerlink&#34; title=&#34;样例&#34;&gt;&lt;/a&gt;样例&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-raw&#34;&gt;5 4
3
4
2
1
4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-raw&#34;&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;设计DP。&lt;/p&gt;
&lt;p&gt;设 $f_i$ 表示第 $i$ 个玩具作为其所处的箱子的结尾的时候，前面所有箱子的总代价的最小值。记 $s_i$ 为 $c_i$ 的前缀和，得到 $n^2$ 状态转移方程：$f_i&amp;#x3D;\min\limits_{1\leqslant j\leqslant i}\big(f_j+(i-j+s_i-s_j-L-1)^2\big)$。记 $w_i$ 为 $s_i+i$，得：$f_i&amp;#x3D;\min\limits_{1\leqslant j\leqslant i}\big(f_j+(w_i-w_j-L-1)^2\big)$&lt;/p&gt;
&lt;p&gt;至于为什么后面要 $-1$？是因为实质上是第 $(j+1)$ 个到第 $i$ 个玩具装到一个箱子中所以是 $i-(j+1)&amp;#x3D;i-j-1$ !!应该只有我一开始不知道吧!!。&lt;/p&gt;
&lt;p&gt;现在这个转移是 $n^2$ 的，显然会炸，考虑优化。&lt;/p&gt;
&lt;h2 id=&#34;思考方式&#34;&gt;&lt;a href=&#34;#思考方式&#34; class=&#34;headerlink&#34; title=&#34;思考方式&#34;&gt;&lt;/a&gt;思考方式&lt;/h2&gt;&lt;p&gt;下面将以两种思维解释斜优的过程：数形结合和线性规划。&lt;/p&gt;
&lt;p&gt;;;;id1 数形结合&lt;/p&gt;
&lt;p&gt;先变化一下转移，变化的方法在后面给出，这样变化的好处也会体现。假设现在有两个决策点 $j,k$$(j&amp;gt;k)$，而从 $j$ 转移到 $i$ 比从 $k$ 转移到 $i$ 优，即：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;f_j+(w_i-w_j-L-1)^2&amp;amp;\leqslant f_k+(w_i-w_k-L-1)^2\&lt;br&gt;f_j+(w_i-L-1)^2-2(w_i-L-1)w_j+w_j^2&amp;amp;\leqslant f_k+(w_i-L-1)^2-2(w_i-L-1)w_k+w_k^2\&lt;br&gt;f_j-2(w_i-L-1)w_j+w_j^2&amp;amp;\leqslant f_k-2(w_i-L-1)w_k+w_k^2\&lt;br&gt;f_j-f_k+w_j^2-w_k^2&amp;amp;\leqslant 2(w_i-L-1)(w_j-w_k)&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;由于 $j&amp;gt;k$ 且 $w_i$ 递增，所以 $w_j-w_k&amp;gt;0$（可能会遇到等于 $0$ 的情况，需要特判为 $INF$），即：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;\frac {f_j+w_j^2-(f_k+w_k^2)}{w_j-w_k}&amp;amp;\leqslant 2(w_i-L-1)&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;此处变化的原则是把++仅关于 $i$ 的项++{.dot}和++仅关于 $j$ 的项++{.dot}放在一边，把++关于 $i$ 且关于 $j$ 的项++{.dot}放在另一边，至于到底在那边并不重要，换边乘 $-1$ 就行了。&lt;/p&gt;
&lt;p&gt;变化完之后，我们发现如果记 $y_i&amp;#x3D;f_i+w_i^2$，$x_i&amp;#x3D;w_i$，那么式子左边就是 $\frac{y_j-y_k}{x_j-x_k}$，形如一个直线的斜率。也就是说，如果把决策点按照 $(w_i,f_i+w_i^2)$ 为坐标的样子标记在平面直角坐标系上，那么如果决策点 $p_1$ 和决策点 $p_2$ $(x_{p_1}&amp;gt;x_{p_2})$ 的连线的斜率 $\leqslant 2(w_i-L-1)$ 那么决策点 $p1$ 优于决策点 $p2$。&lt;/p&gt;
&lt;p&gt;:::info&lt;br&gt;对于刚学斜优的同学，为避免麻烦的细节处理，可以把斜优模板化。比如此处建议尽量把最终的式子化为 $\frac{y_j-y_k}{x_j-x_k}$ 的形式，而不是 $\frac{y_k-y_j}{x_j-x_k}$。!!熟练掌握之后倒也无所谓!!&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;进一步的，我们假设有三个++候选决策点++{.wavy} $p_1,p_2,p_3$，他们在平面上形如这样：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdnjson.com/images/2023/03/09/geogebra-export.png&#34;&gt;{height&amp;#x3D;”400px” width&amp;#x3D;”400px”}&lt;/p&gt;
&lt;p&gt;他们满足条件：$k_1&amp;gt;k_2$。记 $2(w_i-L-1)$ 为 $k_0$，那么接下来 $k_1,k_2$ 与 $k_0$ 的关系有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$k_0&amp;lt;k_2&amp;lt;k_1$，此时 $p_1$ 优于 $p_2$ 优于 $p_3$。&lt;/li&gt;
&lt;li&gt;$k_2\leqslant k_0&amp;lt;k_1$，此时 $p_1$ 优于 $p_2$ 且 $p_3$ 优于 $p_2$。&lt;/li&gt;
&lt;li&gt;$k_2&amp;lt;k_1\leqslant k_0$，此时 $p_3$ 优于 $p_2$ 优于 $p_1$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，在 $k_1&amp;gt;k_2$ 的条件下，无论如何决策点 $p_2$ 一定是++不优的++{.wavy}，于是可以把从候选决策点中删除，像这样：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdnjson.com/images/2023/03/10/geogebra-export.png&#34;&gt;{height&amp;#x3D;”400px” width&amp;#x3D;”400px”}&lt;/p&gt;
&lt;p&gt;再把三个点扩展到平面上的很多点，对于任意三个点进行上述操作。在本题中，剩下的点++从左到右++{.dot}依次连线形成的直线的斜率++单调递增++{.wavy}。这样连线画图的结果就像一个++下凸包++{.wavy}。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有内角大小都在 $[0,\pi]$ 范围内的简单多边形叫凸多边形。&lt;/p&gt;
&lt;p&gt;在平面上能包含所有给定点（即具有凸性）的最小凸多边形叫做凸包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下凸包就是凸包的下半部分。如图是维护的下凸包的例子：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdnjson.com/images/2023/03/12/geogebra-export.png&#34;&gt;{height&amp;#x3D;”400px” width&amp;#x3D;”400px”}&lt;/p&gt;
&lt;p&gt;在寻找决策点的过程中，我们一定能找到三个决策点 $p_1,p_2,p_3$ 满足 $k_{p_1,p_2}\leqslant k_0&amp;lt;k_{p_2,p_3}$。此时 $p_2$ 优于 $p_1$ 且优于 $p_3$，基于本题斜率单调递增的性质，其他直线要么 $k_p&amp;lt;k_0$ 要么 $k_p&amp;gt;k_0$，他们相应的决策点均不优于 $p_2$，那么我们称 $p_2$ 为++最优决策点++{.wavy}。&lt;/p&gt;
&lt;p&gt;在已经维护好的下凸包上，从前往后依次找到第一个斜率大于 $k_0$ 的线段，它的左端点就是最优决策点。由于维护好的凸包从左往右斜率单调，所以可以二分找到最优决策点。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id1 线性规划&lt;/p&gt;
&lt;p&gt;忽略 $\min$，把上面的式子变化成 $y&amp;#x3D;kx+b$ 的形式，即：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;f_i&amp;amp;&amp;#x3D;f_j+\big((w_i-L-1)-w_j\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;f_j+(w_i-L-1)^2-2(w_i-L-1)w_j+w_j^2&lt;br&gt;\end{aligned}\&lt;br&gt;f_j+w_j^2&amp;#x3D;2(w_i-L-1)w_j+f_i-(w_i-L-1)^2&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;此处变化的原则是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 $g_i*g_j$ 看成 $kx$。&lt;/li&gt;
&lt;li&gt;$f_i$ 必须在 $b$。&lt;/li&gt;
&lt;li&gt;$y$ 只含 $g_j$，并++按需++{.dot}与 $kx$ 合并。&lt;/li&gt;
&lt;li&gt;如果 $kx$ 单减，建议两边同乘 $-1$ 使其单增。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::danger&lt;br&gt;注意，划分方式不止一种。&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;对于这种划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$y$ 为 $f_j+w_j^2$&lt;/li&gt;
&lt;li&gt;$k$ 为 $2(w_i-L-1)$&lt;/li&gt;
&lt;li&gt;$x$ 为 $w_j$&lt;/li&gt;
&lt;li&gt;$b$ 为 $f_i-(w_i-L-1)^2$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假如有一堆点在平面上长这样：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdnjson.com/images/2023/03/20/geogebra-export-1.png&#34;&gt;{height&amp;#x3D;”400px” width&amp;#x3D;”400px”}&lt;/p&gt;
&lt;p&gt;我们的目的是使 $f_i$ 最小，即使 $b&amp;#x3D;f_i-(w_i-L-1)^2$ 最小，就是要求一个过一点的斜率为 $2(w_i-L-1)$ 直线使其截距最小，转为线性规划问题。&lt;/p&gt;
&lt;p&gt;那么最优决策点就很好找了：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdnjson.com/images/2023/03/20/geogebra-export-2.png&#34;&gt;{height&amp;#x3D;”400px” width&amp;#x3D;”400px”}&lt;/p&gt;
&lt;p&gt;图中 $F$ 即为最优决策点，且最优决策点必然处于凸包上。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;即便有两种思路，但是建议结合使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在思考前，主要利用代数法转换方程，确定斜率形式。&lt;/li&gt;
&lt;li&gt;在思考阶段建议多用线性规划思想，利用图形直观感受，更好得判断单调性（后文会讲）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;具体实现&#34;&gt;&lt;a href=&#34;#具体实现&#34; class=&#34;headerlink&#34; title=&#34;具体实现&#34;&gt;&lt;/a&gt;具体实现&lt;/h2&gt;&lt;p&gt;用单调队列 $q$ 维护凸包，开头为 $s$，结尾为 $t$，操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在凸包上找到最优决策点 $j$。&lt;/li&gt;
&lt;li&gt;用 $j$ 更新 $i$。&lt;/li&gt;
&lt;li&gt;把 $i$ 作为下一个决策点加入平面，更新凸包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于操作3，比较 $q_{t-1}$、$q_t$ 和 $i$，看是否能删掉 $q_t$：能删就删，重复操作3；不能删就把 $i$ 加入队列。&lt;/p&gt;
&lt;p&gt;判断能否删点有两种方法（可以结合上文“数形结合”中的图理解）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;slope(q[t],q[t-1])&amp;gt;slope(q[t],i)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slope(q[t],q[t-1])&amp;gt;slope(q[t-1],i)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两者是等价的，可把 &lt;code&gt;q[t]&lt;/code&gt; 删除，读者自己思考。&lt;/p&gt;
&lt;p&gt;对于操作1，暴力找的话复杂度还是 $O(n^2)$，二分查找可使复杂度降为 $O(n\log n)$。&lt;/p&gt;
&lt;p&gt;复杂度瓶颈在于操作1。&lt;/p&gt;
&lt;h2 id=&#34;再优化&#34;&gt;&lt;a href=&#34;#再优化&#34; class=&#34;headerlink&#34; title=&#34;再优化&#34;&gt;&lt;/a&gt;再优化&lt;/h2&gt;&lt;p&gt;如果要继续降低复杂度的话，将要利用++决策单调性++{.wavy}，其简单定义为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于形如 $f_i&amp;#x3D;f_j+W(i,j)$的方程，即 $1D&amp;#x2F;1D$ 转移方程，设 $t_i$ 表示 $f_i$ 的最优决策点。那么决策单调性可表示为 $\forall j\leqslant k,t_j\leqslant t_k$。也就是说 $t_i$ 不降。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;证明见下。&lt;/p&gt;
&lt;h3 id=&#34;四边形不等式&#34;&gt;&lt;a href=&#34;#四边形不等式&#34; class=&#34;headerlink&#34; title=&#34;四边形不等式&#34;&gt;&lt;/a&gt;四边形不等式&lt;/h3&gt;&lt;p&gt;设二元函数 $W(x,y)$ 定义域为整数。若 $\forall a\leqslant b\leqslant c\leqslant d,W(a,c)+W(b,d)\leqslant W(a,d)+W(b,c)$，那么函数 $W(x,y)$ 满足++四边形不等式++{.wavy}。&lt;/p&gt;
&lt;p&gt;从形的角度来看，把 $W(x,y)$ 画成这样：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdnjson.com/images/2023/03/21/geogebra-export-1.png&#34;&gt;{height&amp;#x3D;”400px” width&amp;#x3D;”400px”}&lt;/p&gt;
&lt;p&gt;那么满足左下角加右上角小于等于左上角加右下角的 $W(x,y)$ 满足四边形不等式。&lt;/p&gt;
&lt;p&gt;四边形不等式也可表示为 $\forall a&amp;lt;b,W(a,b)+W(a+1,b+1)\leqslant W(a+1,b)+W(a,b+1)$，证明如下：&lt;/p&gt;
&lt;p&gt;$\because\forall a&amp;lt;c,W(a,c)+W(a+1,c+1)\leqslant W(a+1,c)+W(a,c+1)$&lt;div align=&#34;right&#34;&gt;(1)&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;$\therefore\forall a+1&amp;lt;c,W(a+1,c)+W(a+2,c+1)\leqslant W(a+2,c)+W(a+1,c+1)$&lt;div align=&#34;right&#34;&gt;(2)&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;$(1)$、$(2)$ 式相加：$W(a,c)+W(a+2,c+1)\leqslant W(a+2,c)+W(a,c+1)$&lt;/p&gt;
&lt;p&gt;进一步地：$\therefore\forall a\leqslant b\leqslant c,W(a,c)+W(b,c+1)\leqslant W(b,c)+W(a,c+1)$&lt;/p&gt;
&lt;p&gt;同理：$\therefore\forall a\leqslant b\leqslant c\leqslant d,W(a,c)+W(b,d)\leqslant W(b,c)+W(a,d)$&lt;/p&gt;
&lt;p&gt;证毕。&lt;/p&gt;
&lt;h3 id=&#34;决策单调性&#34;&gt;&lt;a href=&#34;#决策单调性&#34; class=&#34;headerlink&#34; title=&#34;决策单调性&#34;&gt;&lt;/a&gt;决策单调性&lt;/h3&gt;&lt;p&gt;对于一个 $1D&amp;#x2F;1D$ 的转移方程 $f_i&amp;#x3D;f_j+W(i,j)$，函数 $w$ 满足四边形不等式是其满足决策单调性的充分条件证明如下：&lt;/p&gt;
&lt;p&gt;$\because t_i$ 在 $f_i$ 的决策点中最优&lt;/p&gt;
&lt;p&gt;$\therefore\forall i\in[1,n],j\in[0,t_i),f_{t_i}+W(t_i,i)\leqslant f_j+W(j,i)$&lt;div align=&#34;right&#34;&gt;(3)&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;又 $\because\forall k\in(i,n],j&amp;lt;t_i&amp;lt;i&amp;lt;k$，且函数 $w$ 满足四边形不等式&lt;/p&gt;
&lt;p&gt;$\therefore W(j,i)+W(t_i,k)\leqslant W(j,k)+W(t_i,i)$&lt;/p&gt;
&lt;p&gt;$\therefore W(t_i,k)-W(t_i,i)\leqslant W(j,k)-W(j,i)$&lt;/p&gt;
&lt;p&gt;与 $(3)$ 式相加得：$f_{t_i}+W(t_i,k)\leqslant f_j+W(j,k)$&lt;/p&gt;
&lt;p&gt;也就是说，从任意在 $i$ 的最优决策点 $t_i$ 之前的决策点，转移到 $i$ 后面任意一个决策点都没有从 $t_i$ 转移优。那么对于 $i$ 之后的决策点 $k$，他的最优决策点一定属于 $[t_i,k)$，那么 $t_i$ 不减，决策具有单调性。&lt;/p&gt;
&lt;p&gt;证毕。&lt;/p&gt;
&lt;h2 id=&#34;证明决策单调性&#34;&gt;&lt;a href=&#34;#证明决策单调性&#34; class=&#34;headerlink&#34; title=&#34;证明决策单调性&#34;&gt;&lt;/a&gt;证明决策单调性&lt;/h2&gt;&lt;p&gt;提供三种方法，后两种与前面的&lt;a href=&#34;#%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F&#34;&gt;思考方式&lt;/a&gt;有关。&lt;/p&gt;
&lt;h3 id=&#34;四边形不等式法&#34;&gt;&lt;a href=&#34;#四边形不等式法&#34; class=&#34;headerlink&#34; title=&#34;四边形不等式法&#34;&gt;&lt;/a&gt;四边形不等式法&lt;/h3&gt;&lt;p&gt;本题转移方程形如 $f_i&amp;#x3D;f_j+W(i,j)$，其中 $W(i,j)&amp;#x3D;(w_i-w_j-L-1)^2$，证明如下：&lt;/p&gt;
&lt;p&gt;记 $Q&amp;#x3D;w_i-w_j-L-1$&lt;/p&gt;
&lt;p&gt;$\therefore W(i,j)&amp;#x3D;Q^2$&lt;/p&gt;
&lt;p&gt;$&lt;br&gt;\begin{aligned}&lt;br&gt;\therefore W(i+1,j+1)&amp;amp;&amp;#x3D;(w_{i+1}-w_{j+1}-L-1)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((s_{i+1}+i+1)-(s_{j+1}+j+1)-L-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((s_i+c_{i+1}+i+1)-(s_j+c_{j+1}+j+1)-L-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((s_i+i)-(s_j+j)-L-1+c_{i+1}-c_{j+1}\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((w_i-w_j-L-1)+c_{i+1}-c_{j+1}\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big(Q+c_{i+1}-c_{j+1}\big)^2,&lt;br&gt;\end{aligned}\&lt;br&gt;\begin{aligned}&lt;br&gt;W(i,j+1)&amp;amp;&amp;#x3D;(w_i-w_{j+1}-L-1)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big(w_i-(s_{j+1}+j+1)-L-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big(w_i-(s_j+c_{j+1}+j+1)-L-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big(w_i-(s_j+j)-L-1-c_{j+1}-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((w_i-w_j-L-1)-c_{j+1}-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big(Q-c_{j+1}-1\big)^2,&lt;br&gt;\end{aligned}\&lt;br&gt;\begin{aligned}&lt;br&gt;W(i+1,j)&amp;amp;&amp;#x3D;(w_{i+1}-w_j-L-1)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((s_{i+1}+i+1)-w_j-L-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((s_i+c_{i+1}+i+1)-w_j-L-1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((s_i+i)-w_j-L-1+c_{i+1}+1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big((w_i-w_j-L-1)+c_{i+1}+1\big)^2\&lt;br&gt;&amp;amp;&amp;#x3D;\big(Q+c_{i+1}+1\big)^2&lt;br&gt;\end{aligned}&lt;br&gt;$&lt;/p&gt;
&lt;p&gt;$&lt;br&gt;\therefore W(i,j)+W(i+1,j+1)&amp;#x3D;2Q^2+2Qc_{i+1}-2Qc_{j+1}+c_{i+1}^2-2c_{i+1}c_{j+1}+c_{j+1}^2,\&lt;br&gt;W(i+1,j)+W(i,j+1)&amp;#x3D;2Q^2+2Qc_{i+1}+c_{i+1}^2+2c_{i+1}+2-2Qc_{j+1}+c_{j+1}^2+2c_{j+1}&lt;br&gt;$&lt;/p&gt;
&lt;p&gt;$&lt;br&gt;\begin{aligned}&lt;br&gt;\therefore W(i,j)+W(i+1,j+1)-W(i+1,j)-W(i,j+1)&amp;amp;&amp;#x3D;-2-2c_{i+1}-2c_{j+1}-2c_{i+1}c_{j+1}\&lt;br&gt;&amp;amp;&amp;#x3D;-2(c_{i+1}+1)(c_{j+1}+1)&lt;br&gt;\end{aligned}&lt;br&gt;$&lt;/p&gt;
&lt;p&gt;又 $\because c_i,c_j\geq1$&lt;/p&gt;
&lt;p&gt;$\therefore-2(c_{i+1}+1)(c_{j+1}+1)\leqslant-8&amp;lt;0$&lt;/p&gt;
&lt;p&gt;$\therefore W(i,j)+W(i+1,j+1)\leqslant W(i+1,j)+W(i,j+1)$&lt;/p&gt;
&lt;p&gt;四边形不等式成立，所以方程具有决策单调性。&lt;/p&gt;
&lt;p&gt;证毕。&lt;/p&gt;
&lt;h3 id=&#34;数形法&#34;&gt;&lt;a href=&#34;#数形法&#34; class=&#34;headerlink&#34; title=&#34;数形法&#34;&gt;&lt;/a&gt;数形法&lt;/h3&gt;&lt;p&gt;由于 $k_0&amp;#x3D;2(w_i-L-1)$ 单增，所以第一个斜率大于 $k_0$ 的线段逐渐往后移，最优决策点后移，即最优决策点的位置单增。&lt;/p&gt;
&lt;p&gt;证毕。&lt;/p&gt;
&lt;h3 id=&#34;线性规划法&#34;&gt;&lt;a href=&#34;#线性规划法&#34; class=&#34;headerlink&#34; title=&#34;线性规划法&#34;&gt;&lt;/a&gt;线性规划法&lt;/h3&gt;&lt;p&gt;由于直线斜率 $2(w_i-L-1)$ 单增，故其与凸包的切点横坐标单增，最优决策点的位置单增。&lt;/p&gt;
&lt;p&gt;证毕。&lt;/p&gt;
&lt;h2 id=&#34;再实现&#34;&gt;&lt;a href=&#34;#再实现&#34; class=&#34;headerlink&#34; title=&#34;再实现&#34;&gt;&lt;/a&gt;再实现&lt;/h2&gt;&lt;p&gt;对于上面的&lt;a href=&#34;#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0&#34;&gt;实现方法&lt;/a&gt;，我们只用更改操作1：在第一根线段的斜率小于等于 $k_0$ 时弹出队首，重复直至第一根线段的斜率大于 $k_0$，此时队首即为最优决策点。&lt;/p&gt;
&lt;p&gt;根据决策单调性，后面决策点的最优决策点一定在队首后面，且每个决策点++至多++{.dot}进出队列1次，时间复杂度 $O(n)$。&lt;/p&gt;
&lt;h2 id=&#34;本题代码&#34;&gt;&lt;a href=&#34;#本题代码&#34; class=&#34;headerlink&#34; title=&#34;本题代码&#34;&gt;&lt;/a&gt;本题代码&lt;/h2&gt;&lt;p&gt;基于上面的方法，建议自己实现一遍，再看我的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#define db double
using namespace std;
const int N=50005;
int n,L;
db c[N],s[N],f[N];
int head,tail,Q[N];

inline db w(int i)&amp;#123;return s[i]+i;&amp;#125;
inline db X(int i)&amp;#123;return w(i);&amp;#125;
inline db Y(int i)&amp;#123;return f[i]+w(i)*w(i);&amp;#125;
inline db slope(int i,int j)&amp;#123;return (Y(i)-Y(j))/(X(i)-X(j));&amp;#125;

int main()&amp;#123;
    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;L);
    for(int i=1;i&amp;lt;=n;i++) scanf(&amp;quot;%lf&amp;quot;,&amp;amp;c[i]);
    for(int i=1;i&amp;lt;=n;i++) s[i]=s[i-1]+c[i];

    head=tail=1;
    //注意此时队列中已经有一个决策点j=0，f[1]需要从这里转移
    for(int i=1;i&amp;lt;=n;i++)&amp;#123;
        while(head&amp;lt;tail&amp;amp;&amp;amp;slope(Q[head],Q[head+1])&amp;lt;=2*(w(i)-L-1)) ++head;
        //寻找最优决策点，并把前面的点弹出。
        f[i]=f[Q[head]]+(w(i)-w(Q[head])-L-1)*(w(i)-w(Q[head])-L-1);
        //用最优决策点（即队首）更新f[i]。
        while(head&amp;lt;tail&amp;amp;&amp;amp;slope(i,Q[tail-1])&amp;lt;=slope(Q[tail-1],Q[tail])) --tail;
        //把i当作决策点维护凸包，把队尾不符合凸包凸性的决策点弹出。
        Q[++tail]=i;
        //把i加入凸包。
    &amp;#125;

    printf(&amp;quot;%lld\n&amp;quot;,(long long)f[n]);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是一般不建议这样写，除法容易丢精度，所以我们把斜率的除换成交叉相乘：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#define db double
using namespace std;
const int N=50005;
int n,L;
db c[N],s[N],f[N];
int head,tail,Q[N];
inline db w(int i)&amp;#123;return s[i]+i;&amp;#125;
inline db X(int i)&amp;#123;return w(i);&amp;#125;
inline db Y(int i)&amp;#123;return f[i]+w(i)*w(i);&amp;#125;
inline int chk1(int i,int j,int p)&amp;#123;return Y(j)-Y(i)&amp;lt;=2ll*(w(p)-L-1)*(X(j)-X(i));&amp;#125;
inline int chk2(int i,int j,int p)&amp;#123;return (Y(p)-Y(i))*(X(j)-X(i))&amp;lt;=(Y(j)-Y(i))*(X(p)-X(i));&amp;#125;
//要卡常的话可以不写函数，直接写表达式
int main()&amp;#123;
    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;L);
    for(int i=1;i&amp;lt;=n;i++) scanf(&amp;quot;%lf&amp;quot;,&amp;amp;c[i]);
    for(int i=1;i&amp;lt;=n;i++) s[i]=s[i-1]+c[i];
    head=tail=1;
    for(int i=1;i&amp;lt;=n;i++)&amp;#123;
        while(head&amp;lt;tail&amp;amp;&amp;amp;chk1(Q[head],Q[head+1],i)) ++head;
        f[i]=f[Q[head]]+(w(i)-w(Q[head])-L-1)*(w(i)-w(Q[head])-L-1);
        while(head&amp;lt;tail&amp;amp;&amp;amp;chk2(Q[tail-1],Q[tail],i)) --tail;
        Q[++tail]=i;
    &amp;#125;
    printf(&amp;quot;%lld\n&amp;quot;,(long long)f[n]);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;&lt;a href=&#34;#注意事项&#34; class=&#34;headerlink&#34; title=&#34;注意事项&#34;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;p&gt;斜率优化代码一般很短，但是细节较多，简单列举一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽量不计算斜率，用交叉相乘，防止丢精。&lt;/li&gt;
&lt;li&gt;判断是否需要在队列里插入初始值，如&lt;a href=&#34;#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0&#34;&gt;例题&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;一般来说，可以出队的边界情况是 &lt;code&gt;head&amp;lt;tail&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如 $x_i$ 可能出现相等的情况：如果你使用的是交叉相乘，那你不用额外做什么；如果你计算了斜率，那就要特判一下 &lt;code&gt;x[i]==x[j]?INF:...&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;一定要根据决策的优劣、题目要求的 $min&amp;#x2F;max$ 来判断要维护上凸还是下凸包。&lt;/li&gt;
&lt;li&gt;交叉相乘的时候，尽量把乘出去的 &lt;code&gt;x[j]-x[i]&lt;/code&gt; 弄成正数，这样就不用考虑变号的问题了。&lt;/li&gt;
&lt;li&gt;建议比较都用 &lt;code&gt;&amp;lt;=&lt;/code&gt; 或 &lt;code&gt;&amp;gt;=&lt;/code&gt; 代替 &lt;code&gt;&amp;lt;&lt;/code&gt; 或 &lt;code&gt;&amp;gt;&lt;/code&gt;，因为斜率相等的点取那个都无所谓，这样还可以去重。&lt;/li&gt;
&lt;li&gt;注意看交叉相乘会不会炸 &lt;code&gt;long long&lt;/code&gt;，会的话换 &lt;code&gt;double&lt;/code&gt;，输出注意转整型。&lt;/li&gt;
&lt;li&gt;一定要计算斜率的话要用 &lt;code&gt;long double&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;注意 $x_i$ 及斜率的单调性，不满足单调的要使用其他方法，见下文。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;不单调斜优&#34;&gt;&lt;a href=&#34;#不单调斜优&#34; class=&#34;headerlink&#34; title=&#34;不单调斜优&#34;&gt;&lt;/a&gt;不单调斜优&lt;/h1&gt;&lt;p&gt;不单调，即斜优的某些元素不单调，如下：&lt;/p&gt;
&lt;h2 id=&#34;斜率不单调&#34;&gt;&lt;a href=&#34;#斜率不单调&#34; class=&#34;headerlink&#34; title=&#34;斜率不单调&#34;&gt;&lt;/a&gt;斜率不单调&lt;/h2&gt;&lt;p&gt;亦可解释为最优决策点不单调，就是不能证明决策单调性，此时不能再弹出队首，只能二分。&lt;/p&gt;
&lt;h2 id=&#34;横坐标不单调&#34;&gt;&lt;a href=&#34;#横坐标不单调&#34; class=&#34;headerlink&#34; title=&#34;横坐标不单调&#34;&gt;&lt;/a&gt;横坐标不单调&lt;/h2&gt;&lt;p&gt;此时插入决策点时可能会插在凸包中间，而队列不支持这种操作。&lt;/p&gt;
&lt;p&gt;可以使用平衡树实现插入、查找前驱操作，或着用&lt;a href=&#34;/OI/cdq/&#34;&gt;CDQ分治&lt;/a&gt;提供单调性，具体见下。&lt;/p&gt;
&lt;p&gt;也可使用李超线段树，&lt;del&gt;但是我不会（&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;斜率、横坐标均不单调&#34;&gt;&lt;a href=&#34;#斜率、横坐标均不单调&#34; class=&#34;headerlink&#34; title=&#34;斜率、横坐标均不单调&#34;&gt;&lt;/a&gt;斜率、横坐标均不单调&lt;/h2&gt;&lt;p&gt;用平衡树。把 $k_0$ 放到平衡树上找前驱，再更新dp值，最后 &lt;code&gt;insert&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;用 $CDQ$，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 $x_i$ 小于 $mid$ 的点作为左区间，其余作为右区间（如果 $x_i$ 单调则原区间的左区间就是左区间，右区间就是右区间）。&lt;/li&gt;
&lt;li&gt;递归左区间。&lt;/li&gt;
&lt;li&gt;对于左区间用单调队列维护出凸包（正确性见下），用它更新右区间。&lt;/li&gt;
&lt;li&gt;递归右区间。&lt;/li&gt;
&lt;li&gt;最后对整个区间对 $x_i$ 排序，此时这个区间 $x_i$ 单调，上一级区间可以直接对于本区间维护凸包，步骤3正确性得证。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;练习&#34;&gt;&lt;a href=&#34;#练习&#34; class=&#34;headerlink&#34; title=&#34;练习&#34;&gt;&lt;/a&gt;练习&lt;/h1&gt;&lt;h2 id=&#34;普通斜优-1&#34;&gt;&lt;a href=&#34;#普通斜优-1&#34; class=&#34;headerlink&#34; title=&#34;普通斜优&#34;&gt;&lt;/a&gt;普通斜优&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2120&#34;&gt;[ZJOI2007] 仓库建设&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3648&#34;&gt;[APIO2014] 序列分割&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P3628&#34;&gt;[APIO2010] 特别行动队&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4360&#34;&gt;[CEOI2004] 锯木厂选址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5017&#34;&gt;[NOIP2018 普及组] 摆渡车&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2900&#34;&gt;[USACO08MAR] Land Acquisition G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4072&#34;&gt;[SDOI2016] 征途&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4056&#34;&gt;[JSOI2009] 火星藏宝图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P6047&#34;&gt;丝之割&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P5308&#34;&gt;[COCI2018-2019#4] Akvizna&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1721&#34;&gt;[NOI2016] 国王饮水记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;不单调斜优-1&#34;&gt;&lt;a href=&#34;#不单调斜优-1&#34; class=&#34;headerlink&#34; title=&#34;不单调斜优&#34;&gt;&lt;/a&gt;不单调斜优&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2365&#34;&gt;任务安排&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.luogu.com.cn/problem/P5785&#34;&gt;[SDOI2012] 任务安排&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4027&#34;&gt;[NOI2007] 货币兑换&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P4655&#34;&gt;[CEOI2017] Building Bridges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2497&#34;&gt;[SDOI2012] 基站建设&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P2305&#34;&gt;[NOI2014] 购票&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;ChatGPT&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/Xing-Ling/p/11210179.html&#34;&gt;辰星凌的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://oi-wiki.org/dp/opt/slope/&#34;&gt;OI-wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;其他大佬的博客&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="OI" scheme="https://tiagim.github.io/categories/OI/" />
        <category term="算法" scheme="https://tiagim.github.io/tags/%E7%AE%97%E6%B3%95/" />
        <category term="DP" scheme="https://tiagim.github.io/tags/DP/" />
        <updated>2023-03-26T09:35:52.000Z</updated>
    </entry>
    <entry>
        <id>https://tiagim.github.io/OI/summarize/2023gdkoi/</id>
        <title>2023GDKOI游记</title>
        <link rel="alternate" href="https://tiagim.github.io/OI/summarize/2023gdkoi/"/>
        <content type="html">&lt;h1 id=&#34;考前&#34;&gt;&lt;a href=&#34;#考前&#34; class=&#34;headerlink&#34; title=&#34;考前&#34;&gt;&lt;/a&gt;考前&lt;/h1&gt;&lt;p&gt;试机的时候搞错机器了，导致没换键盘（那个键盘斜着按不下去），vscode也没配好，直接用的虚拟机的vscode。&lt;/p&gt;
&lt;h1 id=&#34;Day1&#34;&gt;&lt;a href=&#34;#Day1&#34; class=&#34;headerlink&#34; title=&#34;Day1&#34;&gt;&lt;/a&gt;Day1&lt;/h1&gt;&lt;p&gt;顺序开题。&lt;/p&gt;
&lt;p&gt;T1本来写了个结构体包装的矩乘（觉得这样比较方便），但是莫名RE调了20min，后来改成函数乘，就对了。以为随机取点正确率不高，又没做过矩阵乘向量的题，所以只拿了暴力分。&lt;/p&gt;
&lt;p&gt;考后发现随机取点能A。。。&lt;/p&gt;
&lt;p&gt;写T2的时候忘了错排公式，推了好久没推出来。我以为有式子，于是推了30min，还没推出来，也没想到别的做法，我好蠢。&lt;/p&gt;
&lt;p&gt;T3完全不会。&lt;/p&gt;
&lt;h1 id=&#34;Day2&#34;&gt;&lt;a href=&#34;#Day2&#34; class=&#34;headerlink&#34; title=&#34;Day2&#34;&gt;&lt;/a&gt;Day2&lt;/h1&gt;&lt;p&gt;顺序开题。&lt;/p&gt;
&lt;p&gt;T1写大分讨，寄了，没想到cdq，只过了链。&lt;/p&gt;
&lt;p&gt;T2、T3不会。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;还是写什么挂什么，代码能力不够，学的东西不会用。&lt;/p&gt;
</content>
        <category term="OI" scheme="https://tiagim.github.io/categories/OI/" />
        <category term="游记" scheme="https://tiagim.github.io/categories/OI/%E6%B8%B8%E8%AE%B0/" />
        <category term="其他" scheme="https://tiagim.github.io/tags/%E5%85%B6%E4%BB%96/" />
        <updated>2023-03-16T06:46:43.000Z</updated>
    </entry>
    <entry>
        <id>https://tiagim.github.io/OI/summarize/2023spring/</id>
        <title>2023春测游记</title>
        <link rel="alternate" href="https://tiagim.github.io/OI/summarize/2023spring/"/>
        <content type="html">&lt;h1 id=&#34;Step0&#34;&gt;&lt;a href=&#34;#Step0&#34; class=&#34;headerlink&#34; title=&#34;Step0&#34;&gt;&lt;/a&gt;Step0&lt;/h1&gt;&lt;p&gt;考前本来想看点什么的，但是看的也没用到。&lt;/p&gt;
&lt;h1 id=&#34;Step1&#34;&gt;&lt;a href=&#34;#Step1&#34; class=&#34;headerlink&#34; title=&#34;Step1&#34;&gt;&lt;/a&gt;Step1&lt;/h1&gt;&lt;p&gt;开考后先全看一遍，再写完T1。之前考过类似T1的题，但是比它难多了。不过我比较蠢，一开始还在想怎么那数据结构维护这个东西（之前那题就是这样），然后意识到这是大水题（&lt;/p&gt;
&lt;p&gt;总共花了10min。&lt;/p&gt;
&lt;h1 id=&#34;Step2&#34;&gt;&lt;a href=&#34;#Step2&#34; class=&#34;headerlink&#34; title=&#34;Step2&#34;&gt;&lt;/a&gt;Step2&lt;/h1&gt;&lt;p&gt;然后看T2。&lt;/p&gt;
&lt;p&gt;先想到一个二分 $b$ 的做法，但是写挂了，调了30min没调出来。然后换了一种思路，写分块+二分+map去重，还是挂了。&lt;/p&gt;
&lt;h1 id=&#34;Step3&#34;&gt;&lt;a href=&#34;#Step3&#34; class=&#34;headerlink&#34; title=&#34;Step3&#34;&gt;&lt;/a&gt;Step3&lt;/h1&gt;&lt;p&gt;再写T3。&lt;/p&gt;
&lt;p&gt;想到一个 $O(n^2)$ dp做法，写了3k发现假了。然后大部分时间就花在搞T2和T3了。&lt;/p&gt;
&lt;p&gt;T4不会。&lt;/p&gt;
&lt;h1 id=&#34;StepEnd&#34;&gt;&lt;a href=&#34;#StepEnd&#34; class=&#34;headerlink&#34; title=&#34;StepEnd&#34;&gt;&lt;/a&gt;StepEnd&lt;/h1&gt;&lt;p&gt;这次顺序开题，在T2就卡了，好像写什么什么挂。&lt;/p&gt;
&lt;p&gt;对于各种技巧和算法不熟练，思路不缜密，分析不到位（这些问题好像经常有？还在改进）。&lt;/p&gt;
</content>
        <category term="OI" scheme="https://tiagim.github.io/categories/OI/" />
        <category term="游记" scheme="https://tiagim.github.io/categories/OI/%E6%B8%B8%E8%AE%B0/" />
        <category term="其他" scheme="https://tiagim.github.io/tags/%E5%85%B6%E4%BB%96/" />
        <updated>2023-03-16T02:23:45.000Z</updated>
    </entry>
    <entry>
        <id>https://tiagim.github.io/OI/dfz/</id>
        <title>点分治</title>
        <link rel="alternate" href="https://tiagim.github.io/OI/dfz/"/>
        <content type="html">&lt;p&gt;暂未填坑。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
</content>
        <category term="OI" scheme="https://tiagim.github.io/categories/OI/" />
        <category term="算法" scheme="https://tiagim.github.io/tags/%E7%AE%97%E6%B3%95/" />
        <updated>2022-12-07T14:17:27.000Z</updated>
    </entry>
    <entry>
        <id>https://tiagim.github.io/OI/cdq/</id>
        <title>CDQ分治</title>
        <link rel="alternate" href="https://tiagim.github.io/OI/cdq/"/>
        <content type="html">&lt;p&gt;暂未填坑。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
</content>
        <category term="OI" scheme="https://tiagim.github.io/categories/OI/" />
        <category term="算法" scheme="https://tiagim.github.io/tags/%E7%AE%97%E6%B3%95/" />
        <updated>2022-12-07T14:15:53.000Z</updated>
    </entry>
    <entry>
        <id>https://tiagim.github.io/OI/faster/</id>
        <title>常数优化</title>
        <link rel="alternate" href="https://tiagim.github.io/OI/faster/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;先看$c++$版本以及是否打开优化开关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;快读快写（见文末）&lt;/li&gt;
&lt;li&gt;频繁改变的变量加&lt;strong&gt;register&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;a[i]&lt;/code&gt;后访问&lt;code&gt;a[i+1]&lt;/code&gt;、&lt;code&gt;a[i+2]&lt;/code&gt;···&lt;/li&gt;
&lt;li&gt;数组开奇数（原因不明）&lt;/li&gt;
&lt;li&gt;循环展开：&lt;code&gt;for(int i=1;i&amp;lt;=10000;i++)a[i]++;&lt;/code&gt; $\Rightarrow$ &lt;code&gt;for(int i=1;i&amp;lt;=10000;i+=4)a[i]++,a[i+1]++,a[i+2]++,a[i+3]++;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;位运算：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x*=(2,4,8,16...)&lt;/code&gt; $\Rightarrow$ &lt;code&gt;x&amp;lt;&amp;lt;=(1,2,3,4...)&lt;/code&gt; ( &lt;code&gt;/=&lt;/code&gt; $\Rightarrow$ &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x%2&lt;/code&gt; $\Rightarrow$ &lt;code&gt;x&amp;amp;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&amp;gt;y&lt;/code&gt; $\Rightarrow$ &lt;strong&gt;int&lt;/strong&gt;: &lt;code&gt;y-x&amp;gt;&amp;gt;31&lt;/code&gt; &lt;strong&gt;long long&lt;/strong&gt;: &lt;code&gt;y-x&amp;gt;&amp;gt;63&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt; $\Rightarrow$ &lt;code&gt;~x+1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap(x,y)&lt;/code&gt; $\Rightarrow$ &lt;code&gt;x^=y^=x^=y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs(x)&lt;/code&gt; $\Rightarrow$ &lt;code&gt;(x^(x&amp;gt;&amp;gt;31))-(x&amp;gt;&amp;gt;31)&lt;/code&gt; &lt;strong&gt;long long&lt;/strong&gt;: &lt;code&gt;31&lt;/code&gt; $\Rightarrow$ &lt;code&gt;63&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bool&lt;/strong&gt; $\Rightarrow$ &lt;strong&gt;int&amp;#x2F;bitset&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inline&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if(a)b;else c;&lt;/code&gt; $\Rightarrow$ &lt;code&gt;a?b:c;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if(a)b;&lt;/code&gt; $\Rightarrow$ &lt;code&gt;a&amp;amp;&amp;amp;b;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt; $\Rightarrow$ &lt;code&gt;,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int i=1;&lt;/code&gt; $\Rightarrow$ &lt;code&gt;int i(1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i++;&lt;/code&gt; $\Rightarrow$ &lt;code&gt;++i;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;namespace io &amp;#123;
    const int __SIZE = (1 &amp;lt;&amp;lt; 21) + 1;
    char ibuf[__SIZE], *iS, *iT, obuf[__SIZE], *oS = obuf, *oT = oS + __SIZE - 1, __c, qu[55]; int __f, qr, _eof;
    #define Gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, __SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)
    inline void flush () &amp;#123; fwrite (obuf, 1, oS - obuf, stdout), oS = obuf; &amp;#125;
    inline void gc (char &amp;amp;x) &amp;#123; x = Gc(); &amp;#125;
    inline void pc (char x) &amp;#123; *oS ++ = x; if (oS == oT) flush (); &amp;#125;
    inline void pstr (const char *s) &amp;#123; int __len = strlen(s); for (__f = 0; __f &amp;lt; __len; ++__f) pc (s[__f]); &amp;#125;
    inline void gstr (char *s) &amp;#123; for(__c = Gc(); __c &amp;lt; 32 || __c &amp;gt; 126 || __c == &amp;#39; &amp;#39;;)  __c = Gc();
        for(; __c &amp;gt; 31 &amp;amp;&amp;amp; __c &amp;lt; 127 &amp;amp;&amp;amp; __c != &amp;#39; &amp;#39; &amp;amp;&amp;amp; __c != &amp;#39;\n&amp;#39; &amp;amp;&amp;amp; __c != &amp;#39;\r&amp;#39;; ++s, __c = Gc()) *s = __c; *s = 0; &amp;#125;
    template &amp;lt;class I&amp;gt; inline bool gi (I &amp;amp;x) &amp;#123; _eof = 0;
        for (__f = 1, __c = Gc(); (__c &amp;lt; &amp;#39;0&amp;#39; || __c &amp;gt; &amp;#39;9&amp;#39;) &amp;amp;&amp;amp; !_eof; __c = Gc()) &amp;#123; if (__c == &amp;#39;-&amp;#39;) __f = -1; _eof |= __c == EOF; &amp;#125;
        for (x = 0; __c &amp;lt;= &amp;#39;9&amp;#39; &amp;amp;&amp;amp; __c &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; !_eof; __c = Gc()) x = x * 10 + (__c &amp;amp; 15), _eof |= __c == EOF; x *= __f; return !_eof; &amp;#125;
    template &amp;lt;typename I,typename ...Args&amp;gt; inline bool gi(I &amp;amp;tmp, Args &amp;amp;...tmps) &amp;#123; return gi(tmp) ? gi(tmps...), 1 : 0; &amp;#125;
    template &amp;lt;class I&amp;gt; inline void print (I x) &amp;#123; if (!x) pc (&amp;#39;0&amp;#39;); if (x &amp;lt; 0) pc (&amp;#39;-&amp;#39;), x = -x;
        while (x) qu[++ qr] = x % 10 + &amp;#39;0&amp;#39;,  x /= 10; while (qr) pc (qu[qr --]); &amp;#125;
    template &amp;lt;class I&amp;gt; inline void write(char _c,  I x) &amp;#123; print(x), pc(_c); &amp;#125;
    template &amp;lt;typename I,typename ...Args&amp;gt; inline void write(char __enc, I tmp, Args ...tmps) &amp;#123; write(__enc, tmp), write(__enc, tmps...); &amp;#125;
    struct Flusher_ &amp;#123;~Flusher_()&amp;#123;flush();&amp;#125;&amp;#125;io_flusher_;
&amp;#125; using io::pc; using io::gc; using io::pstr; using io::gstr; using io::gi; using io::write; using io::print;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;gi(x, ...);&lt;/code&gt; 读入任意多个任意的整型 &lt;code&gt;x&lt;/code&gt; 等价于 &lt;code&gt;scanf(&amp;quot;%d...&amp;quot;, &amp;amp;x, ...);&lt;/code&gt;其中可以将 &lt;code&gt;%d&lt;/code&gt; 自动识别为对应类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;print(x);&lt;/code&gt; 输出一个任意的整型 &lt;code&gt;x&lt;/code&gt; 等价于 &lt;code&gt;printf(&amp;quot;%d&amp;quot;, x);&lt;/code&gt;其中可以将 &lt;code&gt;%d&lt;/code&gt; 自动识别为对应类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;write(c, x, ...);&lt;/code&gt; 输出任意多个任意的整型 &lt;code&gt;x&lt;/code&gt; 并以 &lt;code&gt;c&lt;/code&gt; 为分隔符，等价于 &lt;code&gt;printf(&amp;quot;%d%c...&amp;quot;, x, c, ...);&lt;/code&gt;其中可以将 &lt;code&gt;%d&lt;/code&gt; 自动识别为对应类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;gc(c);&lt;/code&gt; 读入一个字符 &lt;code&gt;c&lt;/code&gt; 等价于 &lt;code&gt;scanf(&amp;quot;%c&amp;quot;, &amp;amp;c)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;pc(c);&lt;/code&gt; 输出一个字符 &lt;code&gt;c&lt;/code&gt; 等价于 &lt;code&gt;putchar(c);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;gstr(str);&lt;/code&gt; 读入一个字符串 &lt;code&gt;str&lt;/code&gt; 等价于 &lt;code&gt;scanf(&amp;quot;%s&amp;quot;, str);&lt;/code&gt; 可以用 &lt;code&gt;gstr(str + 1);&lt;/code&gt; 替换 &lt;code&gt;scanf(&amp;quot;%s&amp;quot;, str + 1);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;pstr(str);&lt;/code&gt; 输出一个字符串 &lt;code&gt;str&lt;/code&gt; 等价于 &lt;code&gt;printf(&amp;quot;%s&amp;quot;, str);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="OI" scheme="https://tiagim.github.io/categories/OI/" />
        <category term="其他" scheme="https://tiagim.github.io/tags/%E5%85%B6%E4%BB%96/" />
        <updated>2022-12-04T12:19:36.000Z</updated>
    </entry>
    <entry>
        <id>https://tiagim.github.io/OI/summarize/2022noip/</id>
        <title>2022NOIP游记</title>
        <link rel="alternate" href="https://tiagim.github.io/OI/summarize/2022noip/"/>
        <content type="html">&lt;p&gt;今年考得比较离谱。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;先开的T1。T1想到朴素暴力：处理出纵向和横向连续的“0”，再按“c”拼接，“f”往下延申。T1想到这里就没有进展了，一直没想到用前缀和，因为我太菜了。实际上换一种思考方式还是很容易想到前缀和的，然而我没有，还是因为我太菜了。T1浪费了2h+，出来听说其他人火速切T1，挺无语的。&lt;/p&gt;
&lt;p&gt;T2不会。&lt;/p&gt;
&lt;p&gt;后30min，T3打了一个复杂度极高的暴力，还挂了。&lt;/p&gt;
&lt;p&gt;最后5min，T4打了st表，没时间测大样例。&lt;/p&gt;
&lt;p&gt;以后还是多练练。希望wc能有所进步吧。&lt;/p&gt;
</content>
        <category term="OI" scheme="https://tiagim.github.io/categories/OI/" />
        <category term="游记" scheme="https://tiagim.github.io/categories/OI/%E6%B8%B8%E8%AE%B0/" />
        <category term="其他" scheme="https://tiagim.github.io/tags/%E5%85%B6%E4%BB%96/" />
        <updated>2022-12-01T14:50:52.000Z</updated>
    </entry>
</feed>
